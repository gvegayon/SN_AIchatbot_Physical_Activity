---
title: Simulate the Diffusion Process of Adopting AI Chatbots for Increasing Physical Activity
subtitle: For PHS 7045
author: Lingyi Fu
format: pdf
embed-resources: true
---

## Introduction

Artificial intelligence (AI)-driven Chatbots (AI chatbots), developed using natural language processing techniques, are capable of conversing with humans in a natural language format. Recently, AI chatbots have been used to increase physical activity. On the basis of traditional mobile technologies (mHealth), such as wide-reaching and accessibility, portability, and privacy, this new technique benefits the mHealth intervention to be more interactive, autonomous, personalized, supportive, and more natural and intuitive.

The adoption of an AI chatbot is a critical factor that influences the efficacy of using an AI chatbot to change health behaviors. A high adoption can promote health behavior change. Diffusion of Innovation (DOI) theory is a social science theory that explains how new ideas, products, or behaviors spread through a population over time. This theory emphasizes the effect of the social system on the adoption of an innovation, and it also describes five stages of the population adopting an innovation, including innovators, early adopters, early majority, late majority, and laggards. Innovators are people who want to be the first to try the innovation. Early adopters are people who represent opinion leaders. The early majority are rarely leaders, but they do adopt new ideas before the average person. Late majority are skeptical of change, and will only adopt an innovation after it has been tried by the majority. Laggards are bound by tradition and very conservative. People in different stages

Underpinned by the diffusion of innovation theory, this project aims to simulate the diffusion process of adopting an AI chatbot within a social network.

## Solution Plan

The innovators play an important role in activating a social system to adopt an innovation. Therefore, in order to simulate the diffusion process, the critical step is to know who is better to be the innovators to achieve a high adoption rate. There are many approaches to finding out the innovators. In Valente & George's (2020) study, they proposed centrality measures, such as in-degree centrality, betweenness centrality, closeness centrality, bridging approach, inv constraint approach, marginal approach, and random approach. However, these approaches did not consider the strength of ties between nodes. The strength of ties can tell us how easily an AI chatbot can be diffused between two nodes. This project will simulate a diffusion process based on the strength of ties between nodes.

**Step 1. Simulate correlation matrix**

The first step is to simulate a correlation matrix among 25 nodes with the r2 value ranging from -1 to 1. The positive correlation between two nodes represents one node that may promote the use of the AI chatbot of another. While the negative correlation represents one node may hinder the use of the AI chatbot of another.

**Step 2. Initialize network structure based on the adjacency matrix**

The second step is to create a network graph based on an adjacency matrix derived from the correlation matrix at the first step. The nodes of the network represent each individual. The line links two nodes represents the connection of two individuals. The thickness of the line represents the strength between two nodes, with a thick line representing large correlation weight and a thin line representing small correlation weight. The color of the line represents the positive or negative correlation with blue representing positive correlation while red representing negative correlation.

**Step 3. Calculate the centrality of each individual**

Then, based on the simulated network, I calculated the centrality of each individual in the network. The centrality of each node in the simulated network was calculated using the strength metric, which represents the sum of the weights that an individual associates with others in the network. Individuals with higher strength are more likely to influence others to adopt AI chatbots.

**Step 4. Simulate diffusion process**

Lastly, I simulated the diffusion process. I first assigned the number of individuals among each category of adopters based on the diffusion of innovation theory (see Figure 1 below).

![](Theoretical%20diffusion%20process.png){width="494"}

Figure 1. Diffusion of innovation theory

The innovators were determined 2.5% highest centrality nodes. Early adopters, early majority, late majority, and laggards were determined based on the two criteria:

(1) These nodes were connected with the nodes at the prior stage;

(2) These nodes ranked in the top percentage of the adopter category (e.g., 13.5% for early adopters) for weight.

## Preliminary Results

The GIF below visualizes the diffusion of the process of AI Chatbots from innovators to laggards within the social network. The innovator was shown first with purple node, followed by the early adopters with orange nodes, the early majority with yellow nodes, the late majorities with green nodes, and the laggards with blue nodes. There was one node which did not assign to any group.

![](Simulte%20diffusion%20process.gif)

## Next Step

-   Different approaches to identifying innovators may lead to varying adoption percentages. Currently, the final adoption rate is nearly 100% because I predetermined the number of individuals who would adopt the technology. However, this may not be entirely accurate. The next step is to determine the actual adoption rate that this approach can achieve.

-   Once the adoption percentage is established, I will compare the percentage of individuals meeting the PA guidelines across different stages of adopters and non-adopters.

## Code

```{r}
#install.packages("igraph")
library(igraph)
library(animation)

# Step 1: initialize network
set.seed(42) #reproduction
num_nodes <- 25  # Number of nodes in the network

# Generate a random corr matrix
cormatrix <- matrix(runif(num_nodes^2, min = -1, max = 1), num_nodes) #consider negative association later
cormatrix[lower.tri(cormatrix)] <- t(cormatrix)[lower.tri(cormatrix)] #Make symmetric
diag(cormatrix) <- 0 #set diag as 0

# transfer corr matrix to adjacency matrix
threshold <- 0.7 # Only keep edges with a correlation > 0.7 based on the correlation cut-off
adj_matrix <- abs(cormatrix) > threshold
adj_matrix[upper.tri(adj_matrix)] <- FALSE

#initial weights
initial_graph <- graph_from_adjacency_matrix(adj_matrix, mode = "undirected", weighted = TRUE)
edge_weights <- cormatrix[adj_matrix]

#define the parameters of the network layout
fixed_layout <- layout_with_graphopt(initial_graph)
E(initial_graph)$weight <- edge_weights
E(initial_graph)$width <- abs(E(initial_graph)$weight) * 4
E(initial_graph)$color <- ifelse(E(initial_graph)$weight > 0,  "#000080", "#B22222")
V(initial_graph)$size  <- 20
V(initial_graph)$color <- "gray"
V(initial_graph)$label.color <- "black"
#plot(initial_graph, layout = fixed_layout)

# step 2: define the number of nodes in each phase based on diffusion of innovation theory
n_innovators <- round(num_nodes*0.025)
n_early_adopters <- round(num_nodes*0.135)
n_early_majority <- round(num_nodes*0.34)
n_late_majority <- round(num_nodes*0.34)
n_laggards <-  round(num_nodes*0.16)
numer_phases <- c(n_innovators, n_early_adopters,n_early_majority, n_late_majority, n_laggards)

#Step3: simulate the diffusion process

#calculate weights of each node
node_strength <- strength(initial_graph, vids = V(initial_graph), mode = "all", weights = E(initial_graph)$weight)

simulate_diffusion <- function(initial_graph, total_phase, node_strength, numer_phases, node_colors, phase_colors){
  total_phase <- total_phase
  top_indices <- NaN
  used_nodes <- list()
  adoption_history <- list()
  
  for (i in 1:total_phase){
    num_phase <- numer_phases[i]
    
    if (i == 1){
      top_indices <- order(node_strength, decreasing = TRUE)[1:num_phase]
      
    }else{
      connected_nodes <- unique(unlist(lapply(top_indices, function(x) {
        c(neighbors(initial_graph, x, mode = "all"))
      })))
      
      #print(connected_nodes)
      #remove the used nodes
      if (any((used_nodes) %in% connected_nodes)){
        connected_nodes <- setdiff(connected_nodes, used_nodes)
      }else{
        connected_nodes <- connected_nodes
      }
      weights_connected_nodes <- node_strength[connected_nodes]
      medium <- order(weights_connected_nodes, decreasing = TRUE)[1:num_phase]
      top_indices <-connected_nodes[medium]
      #print(top_indices)
    }
    # Save the adoption picture
    top_indices <- top_indices
    used_nodes <- unlist(append(used_nodes, top_indices))
    adoption_history[i] <- list(top_indices)
  }

  return(adoption_history)
}

total_phase <- 5
adoption_history <- simulate_diffusion(initial_graph, total_phase, node_strength, numer_phases, node_colors, phase_colors)
adoption_history

# Step 4: create GIF changing the color of the nodes
#initial and phase color
node_colors <- rep("gray", vcount(initial_graph))
phase_colors <- c("#AA77E9","#F7A24F","#FBEB66", "#4EA660", "#5292F7")

phases <- c("Innovators", "Early Adopters", "Early Majority", "Late Majority", "Laggards")

saveGIF({
  for (i in 1:total_phase){
    color_phase <- phase_colors[i]
    top_indices <- unlist(adoption_history[i])
    phase <- phases[i]
    node_colors[top_indices] <- color_phase  # Change the color of other nodes with different color
    
    plot(initial_graph, 
         vertex.color = node_colors,
         layout = fixed_layout,
         vertex.frame.color = "gray",
         main = paste("Technology Diffusion - Phase:", phase))
    legend("topright", legend = phases, col = phase_colors, pch = 19, bty = "n")
  }
}, movie.name = "technology_diffusion_revised_20_nodes.gif", interval = 2, ani.width = 800, ani.height = 600)
```
